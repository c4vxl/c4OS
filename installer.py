import sys
import threading
import flask
import json
import os
import time
import subprocess
import re
import datetime
import webview

if os.geteuid() != 0:
    print("Please run as root.")
    exit(0)

os.chdir(os.path.dirname(os.path.realpath(__file__)))

def shutdown():
    time.sleep(1)
    os._exit(0)

def get_configs_path(): return os.path.join(os.getcwd(), "previous.conf")
def get_previous_configs(): return json.load(open(get_configs_path(), "r")) if os.path.isfile(get_configs_path()) else {}

def add_previous_config(config, name=datetime.datetime.now().strftime("%d - %B - %Y - %H:%M")):
    prev = get_previous_configs()
    if list(prev.values()).__contains__(config): return
    prev[name] = config
    open(get_configs_path(), "w").write(json.dumps(prev))

def remove_previous_config(name):
    prev = get_previous_configs()
    prev.pop(name)
    open(get_configs_path(), "w").write(json.dumps(prev))

def get_partitions() -> dict[str, list[dict[str, str]]]:
    lsblk = subprocess.run("lsblk -o PKNAME,NAME,SIZE,TYPE,FSTYPE,LABEL -r -n | awk " + "'$4 == " + '"part"' + "'", capture_output=True, text=True, shell=True).stdout
    partitions = []
    lines = lsblk.split("\n")[1:]
    for line in lines:
        match = re.match(r'(\S+)\s+(\S+)\s+(\S+)\s*(\S*)\s*(\S*)\s*(\S*)\s', line)
        if match:
            _, name, size, _, fstype, label = match.groups()

            name = f"/dev/{name}"
            partitions.append({ "name": name, "size": size, "type": fstype or " -- ", "label": label or " -- " })
    return partitions

def get_devices():
    lsblk = subprocess.run("lsblk -d -o NAME,SIZE", capture_output=True, text=True, shell=True).stdout
    devices = []
    lines = lsblk.split("\n")[1:]
    for line in lines:
        match = re.match(r'(\S+)\s+(\S+)', line)
        if match:
            name, size = match.groups()
            devices.append({ "name": f"/dev/{name}", "size": size })
    return devices

def available_wifi_networks():
    networks, seen_ssids = [], []
    output = subprocess.run(["nmcli", "-t", "-f", "SSID,SECURITY", "dev", "wifi"], capture_output=True, text=True).stdout.strip().split("\n")
    for line in output:
        parts = line.split(":", 1)
        if len(parts) != 2 or parts[0] == "" or seen_ssids.__contains__(parts[0]): continue
        seen_ssids.append(parts[0])
        networks.append({ "ssid": parts[0], "password_needed": parts[1].strip() != "" })
    return networks

def is_ethernet_connected():
    result = subprocess.run(["nmcli", "-t", "-f", "DEVICE,TYPE,STATE", "dev"], capture_output=True, text=True)
    for line in result.stdout.strip().split("\n"):
        parts = line.split(":")
        if len(parts) == 3 and parts[1] == "ethernet" and parts[2] == "connected":
            return True
    return False

def has_internet_connection():
    try:
        subprocess.check_call(['ping', '-c', '1', '-W', '3', '8.8.8.8'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError: return False

def connect_wifi(ssid, pw):
    try:
        subprocess.run(f"nmcli connection delete \"{ssid}\"", shell=True)
        result = subprocess.run(["nmcli", "device", "wifi", "connect", ssid, "password", pw], capture_output=True, text=True)
        if result.returncode == 0: return {"success": True}
        else: return {"success": False, "error": result.stderr.strip()}
    except subprocess.CalledProcessError as e:
        return { "success": False, "error": str(e) }

def create_partition(label, size, fs: str, device):
    mkfsLoopup = { "fat32": "mkfs.fat -F 32", "ext4": "mkfs.ext4" }
    try:
        subprocess.run(f"printf \"n\n\n\n+{size}\nw\n\" | fdisk {device}", shell=True, check=True)
        name = subprocess.run("lsblk -rpno NAME", shell=True, capture_output=True).stdout.decode("utf-8").removesuffix("\n").split("\n")[-1]
        subprocess.run(f"yes | {mkfsLoopup[fs.lower()]} {name}", shell=True)
        subprocess.run(f"e2label {name} {label}", shell=True)
        return { "success": True, "name": name }
    except Exception as e:
        return { "success": False, "error": str(e) }

def run_command(cmd):
    def generate():
        isD = False
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, shell=True)
        for line in iter(process.stdout.readline, ''):
            if line.__contains__(".........."):
                if not isD: continue
                isD = True
                yield f"data: Downloading...\n\n"
            else:
                isD = False
                yield f"data: {line}\n\n"    
        
            sys.stdout.flush()
            time.sleep(0.05) # prevents the frontend from hanging up if console updates too fast
        
        yield "data: ==done==\n\n"
        sys.stdout.flush()
        
    return flask.Response(generate(), content_type="text/event-stream", headers={"Connection": "keep-alive"})

def run_flask_server(port=4375):
    app = flask.Flask(__name__)

    @app.route('/')
    def root():
        return """<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Installer</title><style> body { --bg: #e6e0dc; --text: #000000; --text-accent: #ffffff; --primary: rgb(62, 62, 94); --accent: #bac3d4; --highlight: rgb(218, 207, 183); } body { width: 100vw; height: 100vh; overflow-x: hidden; background: var(--bg); margin: 0; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 5px; } * { box-sizing: border-box; color: var(--text); font-family: 'Courier New', Courier, monospace; transition: .2s; user-select: none; } .notification { position: fixed; width: 100%; top: -100%; left: 0; margin: 0; padding: 20px; text-align: center; background-color: rgb(197, 103, 103); color: white; animation: notification__animation 5s; z-index: 99999; } @keyframes notification__animation { 0% { top: -100%; } 10% { top: 0px; } 60% { top: 0px; } 100% { top: -100%; } } .primary, .input, .secondary { text-align: center; background: var(--primary); border: none; outline: none; padding: 10px 20px; cursor: pointer; color: white; border-radius: 13px; border: 2px solid var(--primary); } .input:hover { color: var(--text); } .secondary:not(:hover), .input { background: transparent; color: var(--text); } .input { text-align: left; padding-left: 0; border-left: none; border-right: none; border-top: none; border-radius: 0; } .primary:hover, .input:hover, .primary.active { opacity: .86; } .info { width: 20px; aspect-ratio: 1 / 1; background-color: var(--primary); border-radius: 300px; position: relative; cursor: pointer; } .info:not(.no__label)::after { content: "i"; font-size: small; position: absolute; top: 3px; left: 0; bottom: 0; right: 0; margin: auto; width: max-content; color: white; height: max-content; } .info:hover .tooltip { opacity: 1; z-index: 999; } .info .tooltip { position: absolute; width: max-content; background-color: rgb(46, 45, 45); padding: 10px 15px; border-radius: 30px 0px 30px 30px; margin: auto; text-align: center; right: 110%; top: 20px; opacity: 0; font-size: small; color: white; max-width: 50ch; } .dropdown { position: relative; width: 40ch; color: white; display: flex; flex-direction: column; align-items: center; padding: 10px 0px; overflow: hidden; } .dropdown .dropdown__content { height: 100%; width: 100%; overflow: hidden; max-height: 90ch; overflow-y: scroll; gap: 10px; } .dropdown:not(.active) .dropdown__content { display: none; } select:active, select:hover { text-align: left; color: white; } button:disabled { cursor: not-allowed; opacity: .3; } #pages:scope .slide { min-width: 100%; height: 100%; } #pages .slide.active { min-width: 100%; height: 100%; } #themes__slider { width: 50vw; max-height: 73ch; max-width: 90ch; } #themes__slider .slide h1 { font-size: 140%; margin: 0; padding: 0; } #themes__slider .slide img { width: 100%; height: 100%; object-fit: contain; } #themes__slider .slide:not(.active) { opacity: .4; } highlight { background-color: rgb(218, 207, 183); border-radius: 3px; padding: 5px 10px; border-radius: 13px; white-space: wrap; } .apps__list, .apps__list .apps__item { display: flex; flex-direction: column; align-items: center; justify-content: space-around; } .apps__list { flex-direction: row; flex-wrap: wrap; justify-content: center; padding: 20px; width: 90%; height: 90%; max-width: 150ch; border: 1px solid var(--primary); border-radius: 15px; gap: 20px; } .apps__list .apps__item { text-align: center; border-radius: 10px; width: 10ch; height: 14ch; border: 1px solid var(--primary); cursor: pointer; } .apps__list .apps__item.active, .apps__list .apps__item:hover { background: rgb(from var(--primary) r g b / 50%); scale: 1.1; } .apps__list .apps__item img { width: 50%; height: auto; } .apps__list .apps__item p { margin: 0; height: max-content; color: var(--primary); } ::-webkit-scrollbar { width: 3px; height: 3px; } ::-webkit-scrollbar-thumb { background-color: var(--primary); } .overview { display: flex; flex-direction: column; gap: 20px; text-align: left; max-width: 90ch; } .overview li { display: flex; justify-content: space-between; align-items: center; gap: 30px; white-space: nowrap; } .row { display: flex; align-items: center; gap: 20px; } .modal, .modal .modal__content { display: flex; flex-direction: column; align-items: center; justify-content: center; } .modal { position: fixed; top: 0; width: 100vw; height: 100vh; background: var(--bg); display: none; } .modal.active { display: flex; z-index: 999; } input[type="checkbox"] { appearance: none; position: relative; cursor: pointer; width: 20px; height: 20px; border: 2px solid var(--primary); display: inline-block; border-radius: 12px; } input[type="checkbox"]::after { content: ""; position: absolute; top: 50%; left: 50%; width: 4px; height: 8px; border: solid white; border-width: 0 2px 2px 0; transform: translate(-50%, -60%) rotate(45deg); opacity: 0; } input[type="checkbox"]:checked { background-color: var(--primary); } input[type="checkbox"]:checked::after { opacity: 1; } .option { display: flex; align-items: center; border: 1px solid var(--primary); border-radius: 7px; width: 40ch; height: 10ch; position: relative; background: rgb(from var(--primary) r g b / 10%); cursor: pointer; } .option.disabled { background-color: rgb(from var(--primary) r g b / 5%); cursor: unset; border: none; } .option.active { background: rgb(from var(--highlight) r g b / 50%); border: 1px solid transparent; } .option input { position: absolute; top: 5px; left: 5px; } .option p { margin: 0 auto; } </style><style> .table { display: flex; flex-direction: column; align-items: center; width: 100%; gap: 1px; border-radius: 15px; overflow: hidden; position: relative; overflow-y: visible; max-height: 60ch; } .table .row { display: flex; width: 100%; text-align: center; align-items: center; padding: 10px; } .table .row:first-of-type { background: var(--primary); position: sticky; top: 0; z-index: 99; font-weight: 900; } .table .row:not(:first-of-type) { background: rgb(from var(--primary) r g b / 50%); } .table .row:not(:first-of-type):hover { opacity: .8; } .table .row p { flex-grow: 1; width: 100%; text-overflow: ellipsis; overflow: hidden; margin: 0; color: white; } </style><style> .slider { width: 100%; height: 100%; display: flex; flex-direction: column; } .slider .slide__container { height: 100%; display: flex; gap: 5px; justify-content: left; align-items: center; } .slider .slide__container .slide { text-align: center; min-width: 50%; height: 50%; overflow: hidden; } .slider .slide__container .slide.active, .slider .slide__container .slide .slide__content { display: flex; flex-direction: column; align-items: center; justify-content: center; width: 100%; min-width: 100%; height: max-content; } .slider .slide__container .slide .slide__content { flex-grow: 1; min-width: unset; } .slider .slide__indicator { display: flex; align-items: center; justify-content: space-evenly; } .slider .slide__indicator .circle__container .circle { width: 20px; height: 20px; border-radius: 300px; display: inline-block; border: 1px solid var(--primary); position: relative; } .slider .slide__indicator .circle__container .circle.active { background: var(--primary); } .slider .slide__indicator .circle__container .circle:not(:first-of-type) { margin-left: 8px; } </style><style> .console__output { width: 90vw; max-height: 80vh; display: flex; flex-direction: column; gap: 2px; border-radius: 10px; overflow: hidden; overflow-y: scroll; } .console__output section { border-radius: 10px; display: flex; flex-direction: column; gap: 2px; position: relative; } .console__output section .title { height: 4ch; justify-content: space-between; border-radius: unset; position: sticky; top: 0; } .console__output section .title p { flex-grow: 1; text-align: center; color: white; } .console__output section .title span { color: white; } .console__output section.active .title span { transform: rotateZ(90deg); } .console__output section.active { background: var(--accent); } .console__output section:not(.active) .content { display: none; } .console__output section .content { display: flex; flex-direction: column; padding: 10px; overflow-y: scroll; white-space: nowrap; } </style><style> .choice__box { display: flex; gap: 2px; border-radius: 7px; overflow: hidden; height: 4ch; } .choice__box span { background: var(--accent); padding: 3px 10px; width: 100%; cursor: pointer; display: flex; align-items: center; } .choice__box span.active { background: var(--primary); color: white; } </style><script> class Slider { constructor(element, slides = [], supressNextButtonHandler = false, supressPrevButtonHandler = false) { this.slidesContainer = element.querySelector(":scope .slide__container"); slides.forEach(s => this.slidesContainer.innerHTML += s); this.slides = this.slidesContainer.querySelectorAll(".slide"); this.nextBtn = element.querySelector(":scope > .slide__indicator .next"); this.prevBtn = element.querySelector(":scope > .slide__indicator .prev"); this.current = 0; this.slides.forEach(s => element.querySelector(":scope > .slide__indicator .circle__container").innerHTML += `<div class="circle"></div>`); this.circles = element.querySelectorAll(":scope > .slide__indicator .circle__container .circle"); if (!supressNextButtonHandler) this.nextBtn?.addEventListener("click", () => this.display(this.current + 1)); if (!supressPrevButtonHandler) this.prevBtn?.addEventListener("click", () => this.display(this.current - 1)); this.slides[0]?.classList?.add("active"); this.offset = (element.offsetWidth / 2) - (this.slides[0].offsetWidth / 2); this.display(0); }; display(n) { n = n >= 0 ? n : this.slides.length - 1; n = n < this.slides.length ? n : 0; this.current = n; [...this.slides, ...this.circles].forEach(e => e.classList.remove("active")); [this.slides[n], this.circles[n]].forEach(e => e.classList.add("active")); this.slidesContainer.style.transform = `translateX(${this.offset - (n * (this.slides[n].offsetWidth + 5))}px)`; };};</script></head><body><div class="slider" id="pages"><div class="slide__container"><div class="slide"><h1>Setup Wizzard</h1><div class="slide__content"><p>Welcome to <b>c4OS</b>. We will guide you through the setup of your new installation.</p><i>No worries. It's gonna be quick.</i></div></div><div class="slide"><h1>Let's get to know you</h1><div class="slide__content" style="display: flex; flex-direction: column; align-items: end; width: max-content; gap: 20px;"><div class="row"><label for="setup__input__device__name">Device Name:</label><div class="info"><span class="tooltip">The name your device is going to be visible as in your network</span></div><input id="setup__input__device__name" type="text" class="input" placeholder="Device name" onclick="this.select()" onchange="document.querySelector('#setup__input__bootloader__id').value = this.value;" value="c4OS"></div><div class="row"><label for="setup__input__username">Your Name:</label><input id="setup__input__username" type="text" class="input" placeholder="Username" value="owner" required></div><div class="row"><label for="setup__input__password">Password:</label><div class="info"><span class="tooltip">Leave empty if no password should be used!</span></div><input id="setup__input__password" type="password" class="input" placeholder="Password" onclick="this.select()"></div></div></div><div class="slide"><h1>Where to install</h1><div class="slide__content"><div class="table" id="partition__list"><div class="row"><p>Name</p><p>Label</p><p>Size</p><p>Type</p><p>Use as</p></div></div><div style="margin-top: 20px;" id="partition__list__label"><p style="display: inline-block; margin-right: 40px;">EFI: <b id="partition__list__label__efi">None</b></p><p style="display: inline-block;">Root: <b id="partition__list__label__root">None</b></p></div><div class="info"><span class="tooltip">Selected partitions will be formatted to different fs-type. This will result in all data on this partition being lost. <b>BACK UP YOUR DATA!</b></span></div><hr style="width: 75%; margin: 20px 00px 40px 0px;"><button class="secondary" onclick="document.querySelector('#create__partition__modal').classList.toggle('active')">Create new Partition</button></div></div><div class="slide"><h1>Preinstall apps</h1><div class="slide__content"><div class="row"><button style="width: 20ch;" class="secondary" onclick="this.parentNode.parentNode.querySelectorAll('.apps__list .apps__item:not(.active)').forEach(x => x.click());">Select All</button><button style="width: 20ch;" class="secondary" onclick="this.parentNode.parentNode.querySelectorAll('.apps__list .apps__item.active').forEach(x => x.click())">Select None</button></div><br><div class="apps__list"></div></div></div><div class="slide"><h1>Customize the look</h1><i>Note that you'll always be able to change this later in the <b>Themes</b>-App</i><div class="slide__content"><div class="slider" id="themes__slider"><div class="slide__container"></div><div class="slide__indicator" style="width: max-content; margin: 0 auto; gap: 50px;"><p class="prev" style="width: max-content; cursor: pointer; font-size: 150%; transform: rotateZ(180deg);">➭</p><div class="circle__container"></div><p class="next" style="width: max-content; cursor: pointer; font-size: 150%;">➭</p></div></div></div></div><div class="slide"><h1>Technical Settings</h1><div class="slide__content" style="display: flex; flex-direction: column; align-items: end; width: max-content; gap: 20px;"><div class="row"><label for="setup__input__swap">Swap size:</label><div class="info"><span class="tooltip">If your computer runs out of memory, <br><b>swap space</b> helps by temporarily storing data. A larger swap size can improve performance on systems with less RAM</span></div><input id="setup__input__swap" type="text" class="input" placeholder="Swap size" value="8G" onclick="this.select()"></div><div class="row"><label for="setup__input__swap">Bootloader ID:</label><div class="info"><span class="tooltip">The name the installation is going to show up in BIOS.</span></div><input id="setup__input__bootloader__id" type="text" class="input" placeholder="Bootloader ID" onclick="this.select()" value="c4OS"></div><div class="row"><label>Desktop environment:</label><div class="info"><span class="tooltip">The desktop manager you want to install. (If you're unsure, just use GNOME)</span></div><div class="choice__box" id="setup__input__desktop_env"><div class="selector"></div><span>None</span><span class="active">GNOME</span></div></div></div></div><div class="slide"><h1>And that's it</h1><p>Here's a quick overview of your setup:</p><div class="slide__content"><ul id="overview" class="overview"><li>EFI Partition: <highlight id="overview__efi"></highlight></li><li>Root Partition: <highlight id="overview__root"></highlight></li><li>Swap size: <highlight id="overview__swap"></highlight></li><li>Bootloader ID: <highlight id="overview__bootloader__id"></highlight></li><li>Desktop environment: <highlight id="overview__desktop__env"></highlight></li><hr style="width: 100%;"><li>Device Name: <highlight id="overview__device__name"></highlight></li><li>Username: <highlight id="overview__username"></highlight></li><li>Use Password: <highlight id="overview__use__password"></highlight></li><li>Theme: <highlight id="overview__theme"></highlight></li><hr style="width: 100%;"><li>Preinstalled Applications: <highlight id="overview__software"></highlight></li><hr style="width: 100%;"></ul></div></div></div><div class="slide__indicator"><div class="circle__container"></div><div class="row"><button class="prev secondary" style="display: none;">Previous</button><button class="next primary">Next</button></div></div></div><div class="notifications"></div><div class="modal active" id="prev__configs__modal"><h1>Previous configs</h1><div class="modal__content slide__content" style="margin: auto 0;"><div class="table" id="prev__configs__list" style="width: 90vw; max-height: 70vh;"><div class="row"><p>Previous configurations</p></div></div><div class="modal"><h1 style="font-weight: 200;"><highlight style="margin-top: 3px;"></highlight></h1><div class="modal__content" style="margin: auto 0;"><ul class="overview"><li>EFI Partition: <highlight id="overview__efi"></highlight></li><li>Root Partition: <highlight id="overview__root"></highlight></li><li>Swap size: <highlight id="overview__swap"></highlight></li><li>Bootloader ID: <highlight id="overview__bootloader__id"></highlight></li><li>Desktop environment: <highlight id="overview__desktop__env"></highlight></li><hr style="width: 100%;"><li>Device Name: <highlight id="overview__device__name"></highlight></li><li>Username: <highlight id="overview__username"></highlight></li><li>Use Password: <highlight id="overview__use__password"></highlight></li><li>Theme: <highlight id="overview__theme"></highlight></li><hr style="width: 100%;"><li>Preinstalled Applications: <highlight id="overview__software"></highlight></li><hr style="width: 100%;"></ul><div class="row"><button class="secondary" onclick="this.parentNode.parentNode.parentNode.classList.remove('active')">Go back</button><button class="primary" onclick="startInstallation()">Install</button></div></div></div><hr style="margin: 50px 0; width: 80vw;"><button class="secondary" onclick="this.parentNode.parentNode.classList.remove('active')">Or configure a new one</button></div></div><div class="modal" id="create__partition__modal"><div class="modal__content" style="gap: 20px; align-items: end;"><div class="row" style="justify-content: space-between; width: 100%;"><label for="new__partition__label">Label:</label><input id="new__partition__label" type="text" class="input" placeholder="Partition Label" onclick="this.select()" value="New Partition"></div><div class="row" style="justify-content: space-between; width: 100%;"><label for="new__partition__size">Size:</label><input id="new__partition__size" type="text" class="input" placeholder="Size" onclick="this.select()" value="25G"></div><div class="row" style="justify-content: space-between; width: 100%;"><label for="new__partition__size">FS-Type:</label><div class="info"><span class="tooltip">Use <highlight>fat32</highlight> for your efi partition and <highlight>ext4</highlight> for your root partition.</span></div><select id="new__partition__fstype" class="input"><option value="ext4">ext4</option><option value="fat32">fat32</option></select></div><div class="row" style="justify-content: space-between; width: 100%;"><label for="new__partition__device">Device:</label><select id="new__partition__device" class="input"></select></div><div style="margin: 15px auto;" class="row"><button class="primary" onclick="handleCreatePartition(); this.parentNode.querySelector('button.secondary').click()">Create</button><button class="secondary" onclick="this.parentNode.parentNode.parentNode.classList.remove('active')">Close</button></div></div></div><div class="modal active" id="network__connection__modal"><h1>Set internet connection</h1><div class="modal__content" style="flex-direction: row; gap: 50px;"><div style="padding-right: 50px; border-right: 2px solid var(--primary);"><div class="option active" id="network__connection__option__wifi"><input type="checkbox" checked disabled><p>Connect via WIFI</p></div><br><div class="option info no__label" id="network__connection__option__ethernet"><input type="checkbox" disabled><p>Connect via Ethernet</p><span class="tooltip" style="top: 100%; right: 100%;">No ethernet connection detected. Connect your ethernet cable and press <highlight>Reload</highlight>.</span></div><button class="secondary" style="width: 100%; margin-top: 30px;" onclick="initializeConnectionModal()">Reload</button></div><button class="primary" onclick=" this.parentNode.querySelector('.option.active').id == 'network__connection__option__wifi' ? document.querySelector('#wifi__connection__modal').classList.add('active') : this.parentNode.parentNode.classList.remove('active'); ">Next</button></div></div><div class="modal" id="wifi__connection__modal"><h1>Set internet connection</h1><div class="modal__content" style="width: 90vw; max-width: 150ch;"><div class="table" id="wifi__connection__table" style="width: 100%;"><div class="row"><p>Available WIFI Networks</p></div></div><div style="margin-top: 30px;" class="row"><button class="secondary" onclick="this.parentNode.parentNode.parentNode.classList.remove('active');">Go back</button><button class="primary" onclick="initializeConnectionModal()">Reload</button></div></div></div><div class="modal" id="wifi__ask__for__pw"><h1 style="font-weight: 100;">Connect to <highlight>WLAN Arbeitszimmer</highlight></h1><div class="modal__content" style="width: 90vw; max-width: 150ch; margin: auto 0;"><div class="row"><label for="wifi__password">WIFI Password:</label><input id="wifi__password" type="password" class="input" placeholder="Password" onclick="this.select()"></div><div style="margin-top: 30px;" class="row"><button class="secondary" onclick="this.parentNode.parentNode.parentNode.classList.remove('active');">Go back</button><button class="primary" onclick="sendWifiConnectionRequest(this.dataset.w, this.parentNode.parentNode.querySelector('input').value)">Connect</button></div></div></div><div class="modal active" id="startup__modal"><h1 style="margin-bottom: auto;">Pick an option</h1><div class="modal__content" style="margin-bottom: auto; flex-direction: row; gap: 50px;"><div style="padding-right: 50px; border-right: 2px solid var(--primary);"><div class="option active" id="startup__option__wizzard"><input type="checkbox" checked disabled><p>Open Wizzard</p></div><br><div class="option" id="startup__option__terminal"><input type="checkbox" disabled><p>Open Terminal</p></div><br><div class="option" id="startup__option__gparted"><input type="checkbox" disabled><p>Open GParted</p></div></div><button class="primary" onclick="handleStartupOption()">Select</button></div></div><div class="modal" id="installation__modal"><h1>Installing...</h1><i>This might take a while. Kick back and relax while we do the work.</i><i style="margin-bottom: auto;"><b>Do not disconnect your computer from the internet</b></i><div class="modal__content" style="margin-bottom: auto; margin-top: 10px;"><div class="console__output" id="installation__output"></div></div></div><div class="modal" id="done__modal"><h1>All done.</h1><div class="modal__content" style="margin: auto 0;"><i>Your installation is now done.</i><div style="margin-top: 20px;" class="row"><button style="width: 30ch;" class="secondary" onclick="window.location.reload();">Restart installer</button><button style="width: 30ch;" class="primary" onclick="fetch('/reboot');">Reboot</button></div></div></div><script> let configuration = {}; let previousConfigs = {}; /** * UI Components */ const openModal = (inner) => document.body.innerHTML += `<div class="modal active" onclick="this.classList.remove('active')"><div class="modal__content">${inner}</div></div>`; const createNotification = async (msg) => document.querySelector(".notifications").innerHTML += `<h1 class="notification">${msg}</h1>`; const scrollToBottom = (wrapper) => wrapper.scrollTop = wrapper.scrollHeight; document.querySelectorAll(".choice__box span").forEach(element => { element.addEventListener("click", () => { [...element.parentNode.querySelectorAll("span")].filter(x => x != element).forEach(x => x.classList.remove("active")); element.classList.add("active"); }) }); document.querySelectorAll(".option").forEach(element => { element.addEventListener("click", (e) => { if (element.classList.contains("disabled")) return; let current = element.parentNode.querySelector(".option.active"); current.classList.remove("active"); current.querySelector("input").removeAttribute("checked"); element.classList.add("active"); element.querySelector("input").setAttribute("checked", true); }) }); /** * Page handling */ const handleStartupOption = () => { let option = document.querySelector("#startup__modal .option.active").id; let modal = document.querySelector("#startup__modal"); if (option == "startup__option__wizzard") { modal.style.opacity = "0"; setTimeout(() => modal.remove(), 200); } else if (option == "startup__option__gparted") { fetch("/gparted"); return; } else if (option == "startup__option__terminal") { fetch("/tty"); return; }; }; const displayConfiguration = (parent, conf = configuration) => { const set = (name, va) => parent.querySelector(`#overview__${name}`).innerHTML = va; set("efi", conf.efi); set("root", conf.root); set("device__name", conf.devicename); set("username", conf.username); set("theme", conf.theme || "None"); set("software", conf.software.join(", ") || "None"); set("swap", conf.swap); set("bootloader__id", conf.bootloaderid); set("use__password", conf.password != "" ? "Yes" : "No"); set("desktop__env", conf.desktopenv || "None"); }; const collectConfiguration = () => { const get = (name) => document.querySelector(`#${name}`)?.value; const getP = (type) => [...document.querySelectorAll("#partition__list .row")].find(x => x.querySelector("select")?.value == type)?.querySelector("p:first-of-type")?.textContent; configuration.devicename = get("setup__input__device__name") || "None"; configuration.username = get("setup__input__username") || "None"; configuration.password = get("setup__input__password"); configuration.software = [...document.querySelectorAll(".apps__list .apps__item.active p")].map(x => x.textContent.toLowerCase().replaceAll(" ", "_")); configuration.efi = getP("efi") || "None"; configuration.root = getP("root") || "None"; configuration.swap = get("setup__input__swap") || "None"; configuration.bootloaderid = get("setup__input__bootloader__id") || "None"; configuration.theme = document.querySelector("#themes__slider .slide.active img").alt; configuration.desktopenv = document.querySelector("#setup__input__desktop_env span.active").innerHTML.toLowerCase(); displayConfiguration(document.querySelector("#overview")); }; const checkForMissingInputs = () => { if (pages.current == 1 && configuration.devicename == "None") return "Device name must be set."; if (pages.current == 1 && configuration.username == "None") return "Username must be set."; if (pages.current == 2 && configuration.efi == "None") return "Please provide an EFI Partition."; if (pages.current == 2 && configuration.root == "None") return "Please provide a Root Partition."; if (pages.current == 5 && configuration.swap == "None") return "Swap size must be set."; if (pages.current == 5 && configuration.bootloaderid == "None") return "Please enter a bootloader id."; }; const handlePagesButtons = () => { pages.prevBtn.style.display = pages.current >= 2 ? "unset" : "none"; pages.nextBtn.textContent = pages.current === pages.slides.length - 1 ? "Complete" : "Next"; }; const pages = new Slider(document.querySelector("#pages"), [], true); pages.prevBtn.addEventListener("click", handlePagesButtons); pages.nextBtn.addEventListener("click", (e) => { collectConfiguration(); let error = checkForMissingInputs(); if (error != undefined) { createNotification(error); return; }; pages.display(pages.current + 1); handlePagesButtons(); if (pages.current == 0) { startInstallation(); }; }); /** * Theme chooser */ let themes = [ "c4dots/gnome_green_mar_25", "c4dots/gnome_blue_mar_25", "c4dots/gnome_white_mar_25" ]; const themesSlider = new Slider(document.querySelector("#themes__slider"), slides = themes.map(theme => `<div class="slide"><h1>${theme.split("/")[1]}</h1><div class="slide__content"><img src="https://raw.githubusercontent.com/${theme}/refs/heads/main/prev/a.png" alt="${theme}"></div></div>`) ); /** * Network options */ const initializeConnectionModal = async () => { let connectionInfo = await (await fetch("/connectionInfo")).json(); let isEthernetConnected = connectionInfo.isEthernet; let availableNetworks = connectionInfo.availableNetworks; if (connectionInfo.hasConnection) { document.querySelector("#network__connection__modal").classList.remove("active"); }; let ethernetOption = document.querySelector("#network__connection__modal #network__connection__option__ethernet"); if (!isEthernetConnected) { ethernetOption.querySelector(".tooltip").style.display = 'unset'; ethernetOption.classList.add("disabled"); } else { ethernetOption.querySelector(".tooltip").style.display = 'none'; ethernetOption.classList.remove("disabled"); }; let wifiTable = document.querySelector("#wifi__connection__table"); wifiTable.querySelectorAll(".row:not(:first-of-type)").forEach(x => x.remove()); availableNetworks.forEach(network => wifiTable.innerHTML += `<div class="row" onclick="handleWifiConnectButton('${network.ssid}', '${network.password_needed}')" style="cursor: pointer;"><p>${network.ssid}</p></div>`); }; const sendWifiConnectionRequest = async (network, password = null) => { console.log(`Sending network connection request: ${network}`); let success = (await (await fetch(`/connectWifi?ssid=${network}&pw=${password}`)).json()).success; if (!success) { createNotification("Could not connect. Please try again!"); document.querySelector("#wifi__ask__for__pw #wifi__password").value = ""; return; }; document.querySelectorAll("img").forEach(x => x.src = `${x.src}#${new Date().getTime()}`); document.querySelector("#wifi__ask__for__pw").classList.remove("active"); document.querySelector("#wifi__connection__modal").classList.remove("active"); document.querySelector("#network__connection__modal").classList.remove("active"); configuration.wifi = network; configuration.wifiPW = password; }; const handleWifiConnectButton = (network, need_password) => { if (!need_password) { sendWifiConnectionRequest(network); return; }; document.querySelector("#wifi__ask__for__pw h1 highlight").textContent = network; document.querySelector("#wifi__ask__for__pw .primary").dataset.w = network; document.querySelector("#wifi__ask__for__pw").classList.add("active"); }; initializeConnectionModal(); /** * Software options */ let software = [ { "icon": "https://code.visualstudio.com/assets/images/code-stable.png", "name": "Visual Studio Code" }, { "icon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Toolbox.svg", "name": "Jetbrains Toolbox" }, { "icon": "https://obsproject.com/assets/images/new_icon_small.png", "name": "OBS Studio" }, { "icon": "https://edgestatic.azureedge.net/shared/cms/lrs1c69a1j/section-images/29bfeef37eef4ca3bcf962274c1c7766-png-w256.webp", "name": "Microsoft Edge" }, { "icon": "https://upload.wikimedia.org/wikipedia/de/2/2e/Mozilla_Firefox_Logo.png", "name": "Firefox" }, { "icon": "https://upload.wikimedia.org/wikipedia/commons/e/e1/Google_Chrome_icon_%28February_2022%29.svg", "name": "Google Chrome" }, { "icon": "https://cdn.prod.website-files.com/6257adef93867e50d84d30e2/66e3d80db9971f10a9757c99_Symbol.svg", "name": "Discord" }, { "icon": "https://www.minecraft.net/content/dam/minecraftnet/franchise/logos/Homepage_Download-Launcher_Creeper-Logo_500x500.png", "name": "Minecraft Launcher" }, { "icon": "https://www.raspberrypi.com/app/uploads/2022/02/COLOUR-Raspberry-Pi-Symbol-Registered-300x300.png", "name": "Raspberry Pi Imager" }, { "icon": "https://upload.wikimedia.org/wikipedia/commons/0/01/FileZilla_logo.svg", "name": "File Zilla" }, { "icon": "https://upload.wikimedia.org/wikipedia/commons/8/83/Steam_icon_logo.svg", "name": "Steam" }, { "icon": "https://download.blender.org/branding/blender_logo.png", "name": "Blender" } ]; software.forEach(x => { document.querySelector(".apps__list").innerHTML += ` <div class="apps__item" onclick="this.classList.toggle('active')"><img src="${x.icon}" alt="${x.name}"><p>${x.name}</p></div> ` }); const handleCreatePartition = async () => { let label = document.querySelector("#new__partition__label").value; let size = document.querySelector("#new__partition__size").value; let fs = document.querySelector("#new__partition__fstype").value; let device = document.querySelector("#new__partition__device").value; let success = (await (await fetch(`/mkpartition?label=${label}&size=${size}&fs=${fs}&device=${device}`)).json()).success; if (success) { reloadPartitionList(); return; }; createNotification("Something went wrong while creating the partition. (Maybe insufficient space)") }; const handlePartitionDropdownChange = (select) => { if (select.value != "none") { select.setAttribute("class", "primary"); } else { select.setAttribute("class", "secondary"); }; collectConfiguration(); document.querySelector("#partition__list__label__efi").innerHTML = configuration.efi; document.querySelector("#partition__list__label__root").innerHTML = configuration.root; [...document.querySelectorAll("#partition__list .row select")] .filter(x => x != select && x.value == select.value) .forEach(x => { x.value = "none"; x.setAttribute("class", "secondary"); }); }; const reloadPartitionList = async () => { let response = await (await fetch("/parts")).json(); let partitions = response.partitions; let deviceDropdown = document.querySelector("#new__partition__device"); deviceDropdown.innerHTML = ""; response.devices.forEach(x => deviceDropdown.innerHTML += `<option value="${x.name}">${x.name} - ${x.size}</option>`); document.querySelectorAll("#partition__list .row:not(:first-of-type)").forEach(x => x.remove()); configuration.efi = "None"; configuration.root = "None"; document.querySelector("#partition__list__label__efi").innerHTML = configuration.efi; document.querySelector("#partition__list__label__root").innerHTML = configuration.root; partitions.filter(x => x.mount == " -- " || !x.mount).forEach(part => { document.querySelector("#partition__list").innerHTML += ` <div class="row"><p>${part.name}</p><p>${part.label}</p><p>${part.size}</p><p>${part.type}</p><p><select class="secondary" onchange="handlePartitionDropdownChange(this)"><option value="none" selected>None</option><option value="efi">EFI</option><option value="root">Root</option></select></p></div>` }); }; reloadPartitionList(); /** * Installation logging */ const startInstallation = async () => { let container = document.querySelector("#installation__output"); document.querySelector("#installation__modal").classList.add("active"); let url = `/install?${Object.keys(configuration).map(k => `${k}=${configuration[k]}`).join("&")}`; const source = new EventSource(url); let buffer = []; let isUpdating = false; source.onmessage = (event) => { buffer.push(event.data); if (!isUpdating) { isUpdating = true; setTimeout(() => { let newContent = ""; buffer.forEach(data => { console.log(data); if (data.startsWith("==done==")) { document.querySelector("#installation__output").innerHTML = ""; document.querySelector("#done__modal").classList.add("active"); return; }; if (data.startsWith(">>> ") && !data.startsWith(">>> xorg")) { container.innerHTML += ` <section><div class="title row primary" onclick=" [...this.parentNode.parentNode.querySelectorAll('.title')].filter(x => x != this).forEach(x => x.parentNode.classList.remove('active')); this.parentNode.classList.toggle('active'); scrollToBottom(document.querySelector('#installation__output')); "><p>${data.replace(">>> ", "")}</p><span>></span></div><div class="content"></div></section>`; document.querySelector("#installation__output section:last-of-type .title").click(); } else { newContent += "<span>"; for (let char of data) { if (char === "\b") newContent = newContent.slice(0, -1); else newContent += char; }; newContent += "</span>"; }; }); document.querySelector("#installation__output section:last-of-type .content").innerHTML += newContent; let wrapper = document.querySelector("#installation__output"); (wrapper.scrollHeight - wrapper.scrollTop <= wrapper.clientHeight + 400) ? scrollToBottom(wrapper) : null; buffer = []; isUpdating = false; }, 100); }; }; source.onerror = () => { source.close(); }; }; /** * Prev configs */ const loadPreviousConfigs = async () => { previousConfigs = await (await fetch("/prevConfigs")).json(); if (Object.keys(previousConfigs).length === 0) { document.querySelector("#prev__configs__modal").remove(); return; }; Object.entries(previousConfigs).forEach(x => { x[1].software = x[1].software.split(","); }); Object.keys(previousConfigs).forEach(conf => { document.querySelector("#prev__configs__list").innerHTML += `<div class="row" style="cursor: pointer;" onclick=" configuration = previousConfigs['${conf}']; this.parentNode.parentNode.querySelector('.modal').classList.add('active'); displayConfiguration(document.querySelector('#prev__configs__modal ul')); document.querySelector('#prev__configs__modal highlight').innerHTML = '${conf}'; "><p>${conf}</p></div>`; }); }; loadPreviousConfigs(); document.querySelectorAll("input[type=text]").forEach(x => x.addEventListener("focus", () => x.select())); </script></body></html>"""
    
    @app.route("/connectionInfo")
    def connections():
        return json.dumps({ "hasConnection": has_internet_connection(), "isEthernet": is_ethernet_connected(), "availableNetworks": available_wifi_networks() })

    @app.route('/connectWifi')
    def connectWifi(): return json.dumps(connect_wifi(flask.request.args.get("ssid"), flask.request.args.get("pw")))

    @app.route('/parts')
    def parts(): return json.dumps({ "partitions": get_partitions(), "devices": get_devices() })

    @app.route('/mkpartition')
    def mkpartition(): return json.dumps(create_partition(flask.request.args.get("label"), flask.request.args.get("size"), flask.request.args.get("fs"), flask.request.args.get("device")))

    @app.route('/gparted')
    def gparted():
        print("Opening gparted...")
        subprocess.run("gparted >/dev/null 2>&1 &", shell=True)
        return ""

    @app.route('/tty')
    def tty():
        print("Opening tty...")
        shutdown()
        return ""

    @app.route('/reboot')
    def reboot():
        print("Rebooting...")
        subprocess.run("reboot now", shell=True)
        return ""

    @app.route('/prevConfigs')
    def prevConfigs(): return get_previous_configs()

    @app.route('/delPrevConfig')
    def delPrevConfig(): return remove_previous_config(flask.request.args.get("id"))

    @app.route("/install")
    def install():    
        def get(x):                 return flask.request.args.get(x)
        def default(x, default):    x = get(x); return x if x else default
        def or_quit(x):             x = get(x); return x if x else shutdown()
        def get_as_arg(name, x):    return f" --{name}='{x}'" if x else ""

        add_previous_config(dict(flask.request.args))

        osArgs = get_as_arg("root", or_quit("root")) + get_as_arg("efi", or_quit("efi")) + get_as_arg("bootloader-id", default("bootloaderid", "c4OS")) + get_as_arg("hostname", default("devicename", "c4OS")) + get_as_arg("swap", default("swap", "1G")) + get_as_arg("desktop-env", default("desktopenv", "gnome"))
        usrArgs = get_as_arg("username", default("username", "owner")) + get_as_arg("password", get("password")) + get_as_arg("theme", get("theme"))
        softwareArgs = get_as_arg("software", get("software"))
        cmd = f"stdbuf -oL sh installer.sh {osArgs.removeprefix(' ') + usrArgs + softwareArgs}"
        print(cmd)
        return run_command(cmd)

    @app.route('/end')
    def end():
        shutdown()
        return ""

    threading.Thread(target=app.run, kwargs={"host": "127.0.0.1", "port": port, "use_reloader": False}).start()

def start_desktop_app():
    initialized = False
    def close_listener():
        while True:
            time.sleep(1)
            if not webview.windows and initialized:
                shutdown()
                break
    
    threading.Thread(target=close_listener).start()

    initialized = True
    webview.create_window("Themes", "http://127.0.0.1:4375", fullscreen=True)
    webview.start()

threading.Thread(target=run_flask_server).start()
start_desktop_app()